//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: berkeleychat.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Berkeleychat_BerkeleychatClient`, then call methods of this protocol to make API calls.
internal protocol Berkeleychat_BerkeleychatClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol? { get }

  func uploadPhoto(
    _ request: Berkeleychat_UploadPhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Berkeleychat_UploadPhotoRequest, Berkeleychat_UploadPhotoResponse>

  func uploadAudio(
    _ request: Berkeleychat_UploadAudioRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Berkeleychat_UploadAudioRequest, Berkeleychat_UploadAudioResponse>

  func createAccount(
    _ request: Berkeleychat_CreateAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Berkeleychat_CreateAccountRequest, Berkeleychat_CreateAccountResponse>

  func getUsers(
    _ request: Berkeleychat_GetUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Berkeleychat_GetUsersRequest, Berkeleychat_GetUsersResponse>

  func getMessages(
    _ request: Berkeleychat_GetMessagesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Berkeleychat_Message) -> Void
  ) -> ServerStreamingCall<Berkeleychat_GetMessagesRequest, Berkeleychat_Message>

  func sendMessage(
    _ request: Berkeleychat_Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Berkeleychat_Message, Berkeleychat_Message>
}

extension Berkeleychat_BerkeleychatClientProtocol {
  internal var serviceName: String {
    return "berkeleychat.Berkeleychat"
  }

  /// Unary call to UploadPhoto
  ///
  /// - Parameters:
  ///   - request: Request to send to UploadPhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func uploadPhoto(
    _ request: Berkeleychat_UploadPhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Berkeleychat_UploadPhotoRequest, Berkeleychat_UploadPhotoResponse> {
    return self.makeUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.uploadPhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadPhotoInterceptors() ?? []
    )
  }

  /// Unary call to UploadAudio
  ///
  /// - Parameters:
  ///   - request: Request to send to UploadAudio.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func uploadAudio(
    _ request: Berkeleychat_UploadAudioRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Berkeleychat_UploadAudioRequest, Berkeleychat_UploadAudioResponse> {
    return self.makeUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.uploadAudio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadAudioInterceptors() ?? []
    )
  }

  /// Unary call to CreateAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAccount(
    _ request: Berkeleychat_CreateAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Berkeleychat_CreateAccountRequest, Berkeleychat_CreateAccountResponse> {
    return self.makeUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetUsers
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUsers(
    _ request: Berkeleychat_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Berkeleychat_GetUsersRequest, Berkeleychat_GetUsersResponse> {
    return self.makeUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  /// Server streaming call to GetMessages
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessages.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getMessages(
    _ request: Berkeleychat_GetMessagesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Berkeleychat_Message) -> Void
  ) -> ServerStreamingCall<Berkeleychat_GetMessagesRequest, Berkeleychat_Message> {
    return self.makeServerStreamingCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to SendMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMessage(
    _ request: Berkeleychat_Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Berkeleychat_Message, Berkeleychat_Message> {
    return self.makeUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Berkeleychat_BerkeleychatClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Berkeleychat_BerkeleychatNIOClient")
internal final class Berkeleychat_BerkeleychatClient: Berkeleychat_BerkeleychatClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the berkeleychat.Berkeleychat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Berkeleychat_BerkeleychatNIOClient: Berkeleychat_BerkeleychatClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol?

  /// Creates a client for the berkeleychat.Berkeleychat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Berkeleychat_BerkeleychatAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol? { get }

  func makeUploadPhotoCall(
    _ request: Berkeleychat_UploadPhotoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Berkeleychat_UploadPhotoRequest, Berkeleychat_UploadPhotoResponse>

  func makeUploadAudioCall(
    _ request: Berkeleychat_UploadAudioRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Berkeleychat_UploadAudioRequest, Berkeleychat_UploadAudioResponse>

  func makeCreateAccountCall(
    _ request: Berkeleychat_CreateAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Berkeleychat_CreateAccountRequest, Berkeleychat_CreateAccountResponse>

  func makeGetUsersCall(
    _ request: Berkeleychat_GetUsersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Berkeleychat_GetUsersRequest, Berkeleychat_GetUsersResponse>

  func makeGetMessagesCall(
    _ request: Berkeleychat_GetMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Berkeleychat_GetMessagesRequest, Berkeleychat_Message>

  func makeSendMessageCall(
    _ request: Berkeleychat_Message,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Berkeleychat_Message, Berkeleychat_Message>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Berkeleychat_BerkeleychatAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Berkeleychat_BerkeleychatClientMetadata.serviceDescriptor
  }

  internal var interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUploadPhotoCall(
    _ request: Berkeleychat_UploadPhotoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Berkeleychat_UploadPhotoRequest, Berkeleychat_UploadPhotoResponse> {
    return self.makeAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.uploadPhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadPhotoInterceptors() ?? []
    )
  }

  internal func makeUploadAudioCall(
    _ request: Berkeleychat_UploadAudioRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Berkeleychat_UploadAudioRequest, Berkeleychat_UploadAudioResponse> {
    return self.makeAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.uploadAudio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadAudioInterceptors() ?? []
    )
  }

  internal func makeCreateAccountCall(
    _ request: Berkeleychat_CreateAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Berkeleychat_CreateAccountRequest, Berkeleychat_CreateAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  internal func makeGetUsersCall(
    _ request: Berkeleychat_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Berkeleychat_GetUsersRequest, Berkeleychat_GetUsersResponse> {
    return self.makeAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  internal func makeGetMessagesCall(
    _ request: Berkeleychat_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Berkeleychat_GetMessagesRequest, Berkeleychat_Message> {
    return self.makeAsyncServerStreamingCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  internal func makeSendMessageCall(
    _ request: Berkeleychat_Message,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Berkeleychat_Message, Berkeleychat_Message> {
    return self.makeAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Berkeleychat_BerkeleychatAsyncClientProtocol {
  internal func uploadPhoto(
    _ request: Berkeleychat_UploadPhotoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Berkeleychat_UploadPhotoResponse {
    return try await self.performAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.uploadPhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadPhotoInterceptors() ?? []
    )
  }

  internal func uploadAudio(
    _ request: Berkeleychat_UploadAudioRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Berkeleychat_UploadAudioResponse {
    return try await self.performAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.uploadAudio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadAudioInterceptors() ?? []
    )
  }

  internal func createAccount(
    _ request: Berkeleychat_CreateAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Berkeleychat_CreateAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  internal func getUsers(
    _ request: Berkeleychat_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Berkeleychat_GetUsersResponse {
    return try await self.performAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.getUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  internal func getMessages(
    _ request: Berkeleychat_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Berkeleychat_Message> {
    return self.performAsyncServerStreamingCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  internal func sendMessage(
    _ request: Berkeleychat_Message,
    callOptions: CallOptions? = nil
  ) async throws -> Berkeleychat_Message {
    return try await self.performAsyncUnaryCall(
      path: Berkeleychat_BerkeleychatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Berkeleychat_BerkeleychatAsyncClient: Berkeleychat_BerkeleychatAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Berkeleychat_BerkeleychatClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'uploadPhoto'.
  func makeUploadPhotoInterceptors() -> [ClientInterceptor<Berkeleychat_UploadPhotoRequest, Berkeleychat_UploadPhotoResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadAudio'.
  func makeUploadAudioInterceptors() -> [ClientInterceptor<Berkeleychat_UploadAudioRequest, Berkeleychat_UploadAudioResponse>]

  /// - Returns: Interceptors to use when invoking 'createAccount'.
  func makeCreateAccountInterceptors() -> [ClientInterceptor<Berkeleychat_CreateAccountRequest, Berkeleychat_CreateAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'getUsers'.
  func makeGetUsersInterceptors() -> [ClientInterceptor<Berkeleychat_GetUsersRequest, Berkeleychat_GetUsersResponse>]

  /// - Returns: Interceptors to use when invoking 'getMessages'.
  func makeGetMessagesInterceptors() -> [ClientInterceptor<Berkeleychat_GetMessagesRequest, Berkeleychat_Message>]

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Berkeleychat_Message, Berkeleychat_Message>]
}

internal enum Berkeleychat_BerkeleychatClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Berkeleychat",
    fullName: "berkeleychat.Berkeleychat",
    methods: [
      Berkeleychat_BerkeleychatClientMetadata.Methods.uploadPhoto,
      Berkeleychat_BerkeleychatClientMetadata.Methods.uploadAudio,
      Berkeleychat_BerkeleychatClientMetadata.Methods.createAccount,
      Berkeleychat_BerkeleychatClientMetadata.Methods.getUsers,
      Berkeleychat_BerkeleychatClientMetadata.Methods.getMessages,
      Berkeleychat_BerkeleychatClientMetadata.Methods.sendMessage,
    ]
  )

  internal enum Methods {
    internal static let uploadPhoto = GRPCMethodDescriptor(
      name: "UploadPhoto",
      path: "/berkeleychat.Berkeleychat/UploadPhoto",
      type: GRPCCallType.unary
    )

    internal static let uploadAudio = GRPCMethodDescriptor(
      name: "UploadAudio",
      path: "/berkeleychat.Berkeleychat/UploadAudio",
      type: GRPCCallType.unary
    )

    internal static let createAccount = GRPCMethodDescriptor(
      name: "CreateAccount",
      path: "/berkeleychat.Berkeleychat/CreateAccount",
      type: GRPCCallType.unary
    )

    internal static let getUsers = GRPCMethodDescriptor(
      name: "GetUsers",
      path: "/berkeleychat.Berkeleychat/GetUsers",
      type: GRPCCallType.unary
    )

    internal static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/berkeleychat.Berkeleychat/GetMessages",
      type: GRPCCallType.serverStreaming
    )

    internal static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/berkeleychat.Berkeleychat/SendMessage",
      type: GRPCCallType.unary
    )
  }
}

