//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: berkeleychat.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// To build a server, implement a class that conforms to this protocol.
internal protocol Berkeleychat_BerkeleychatProvider: CallHandlerProvider {
  var interceptors: Berkeleychat_BerkeleychatServerInterceptorFactoryProtocol? { get }

  func uploadPhoto(request: Berkeleychat_UploadPhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Berkeleychat_UploadPhotoResponse>

  func uploadAudio(request: Berkeleychat_UploadAudioRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Berkeleychat_UploadAudioResponse>

  func createAccount(request: Berkeleychat_CreateAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Berkeleychat_CreateAccountResponse>

  func getUsers(request: Berkeleychat_GetUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Berkeleychat_GetUsersResponse>

  func getMessages(request: Berkeleychat_GetMessagesRequest, context: StreamingResponseCallContext<Berkeleychat_Message>) -> EventLoopFuture<GRPCStatus>

  func sendMessage(request: Berkeleychat_Message, context: StatusOnlyCallContext) -> EventLoopFuture<Berkeleychat_Message>
}

extension Berkeleychat_BerkeleychatProvider {
  internal var serviceName: Substring {
    return Berkeleychat_BerkeleychatServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UploadPhoto":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_UploadPhotoRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_UploadPhotoResponse>(),
        interceptors: self.interceptors?.makeUploadPhotoInterceptors() ?? [],
        userFunction: self.uploadPhoto(request:context:)
      )

    case "UploadAudio":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_UploadAudioRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_UploadAudioResponse>(),
        interceptors: self.interceptors?.makeUploadAudioInterceptors() ?? [],
        userFunction: self.uploadAudio(request:context:)
      )

    case "CreateAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_CreateAccountRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_CreateAccountResponse>(),
        interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? [],
        userFunction: self.createAccount(request:context:)
      )

    case "GetUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_GetUsersRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_GetUsersResponse>(),
        interceptors: self.interceptors?.makeGetUsersInterceptors() ?? [],
        userFunction: self.getUsers(request:context:)
      )

    case "GetMessages":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_GetMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_Message>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        userFunction: self.getMessages(request:context:)
      )

    case "SendMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_Message>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_Message>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        userFunction: self.sendMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Berkeleychat_BerkeleychatAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Berkeleychat_BerkeleychatServerInterceptorFactoryProtocol? { get }

  func uploadPhoto(
    request: Berkeleychat_UploadPhotoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Berkeleychat_UploadPhotoResponse

  func uploadAudio(
    request: Berkeleychat_UploadAudioRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Berkeleychat_UploadAudioResponse

  func createAccount(
    request: Berkeleychat_CreateAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Berkeleychat_CreateAccountResponse

  func getUsers(
    request: Berkeleychat_GetUsersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Berkeleychat_GetUsersResponse

  func getMessages(
    request: Berkeleychat_GetMessagesRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Berkeleychat_Message>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func sendMessage(
    request: Berkeleychat_Message,
    context: GRPCAsyncServerCallContext
  ) async throws -> Berkeleychat_Message
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Berkeleychat_BerkeleychatAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Berkeleychat_BerkeleychatServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Berkeleychat_BerkeleychatServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Berkeleychat_BerkeleychatServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UploadPhoto":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_UploadPhotoRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_UploadPhotoResponse>(),
        interceptors: self.interceptors?.makeUploadPhotoInterceptors() ?? [],
        wrapping: { try await self.uploadPhoto(request: $0, context: $1) }
      )

    case "UploadAudio":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_UploadAudioRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_UploadAudioResponse>(),
        interceptors: self.interceptors?.makeUploadAudioInterceptors() ?? [],
        wrapping: { try await self.uploadAudio(request: $0, context: $1) }
      )

    case "CreateAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_CreateAccountRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_CreateAccountResponse>(),
        interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? [],
        wrapping: { try await self.createAccount(request: $0, context: $1) }
      )

    case "GetUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_GetUsersRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_GetUsersResponse>(),
        interceptors: self.interceptors?.makeGetUsersInterceptors() ?? [],
        wrapping: { try await self.getUsers(request: $0, context: $1) }
      )

    case "GetMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_GetMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_Message>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        wrapping: { try await self.getMessages(request: $0, responseStream: $1, context: $2) }
      )

    case "SendMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Berkeleychat_Message>(),
        responseSerializer: ProtobufSerializer<Berkeleychat_Message>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        wrapping: { try await self.sendMessage(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Berkeleychat_BerkeleychatServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'uploadPhoto'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadPhotoInterceptors() -> [ServerInterceptor<Berkeleychat_UploadPhotoRequest, Berkeleychat_UploadPhotoResponse>]

  /// - Returns: Interceptors to use when handling 'uploadAudio'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadAudioInterceptors() -> [ServerInterceptor<Berkeleychat_UploadAudioRequest, Berkeleychat_UploadAudioResponse>]

  /// - Returns: Interceptors to use when handling 'createAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAccountInterceptors() -> [ServerInterceptor<Berkeleychat_CreateAccountRequest, Berkeleychat_CreateAccountResponse>]

  /// - Returns: Interceptors to use when handling 'getUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUsersInterceptors() -> [ServerInterceptor<Berkeleychat_GetUsersRequest, Berkeleychat_GetUsersResponse>]

  /// - Returns: Interceptors to use when handling 'getMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMessagesInterceptors() -> [ServerInterceptor<Berkeleychat_GetMessagesRequest, Berkeleychat_Message>]

  /// - Returns: Interceptors to use when handling 'sendMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMessageInterceptors() -> [ServerInterceptor<Berkeleychat_Message, Berkeleychat_Message>]
}

internal enum Berkeleychat_BerkeleychatServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Berkeleychat",
    fullName: "berkeleychat.Berkeleychat",
    methods: [
      Berkeleychat_BerkeleychatServerMetadata.Methods.uploadPhoto,
      Berkeleychat_BerkeleychatServerMetadata.Methods.uploadAudio,
      Berkeleychat_BerkeleychatServerMetadata.Methods.createAccount,
      Berkeleychat_BerkeleychatServerMetadata.Methods.getUsers,
      Berkeleychat_BerkeleychatServerMetadata.Methods.getMessages,
      Berkeleychat_BerkeleychatServerMetadata.Methods.sendMessage,
    ]
  )

  internal enum Methods {
    internal static let uploadPhoto = GRPCMethodDescriptor(
      name: "UploadPhoto",
      path: "/berkeleychat.Berkeleychat/UploadPhoto",
      type: GRPCCallType.unary
    )

    internal static let uploadAudio = GRPCMethodDescriptor(
      name: "UploadAudio",
      path: "/berkeleychat.Berkeleychat/UploadAudio",
      type: GRPCCallType.unary
    )

    internal static let createAccount = GRPCMethodDescriptor(
      name: "CreateAccount",
      path: "/berkeleychat.Berkeleychat/CreateAccount",
      type: GRPCCallType.unary
    )

    internal static let getUsers = GRPCMethodDescriptor(
      name: "GetUsers",
      path: "/berkeleychat.Berkeleychat/GetUsers",
      type: GRPCCallType.unary
    )

    internal static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/berkeleychat.Berkeleychat/GetMessages",
      type: GRPCCallType.serverStreaming
    )

    internal static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/berkeleychat.Berkeleychat/SendMessage",
      type: GRPCCallType.unary
    )
  }
}
